<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
            http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
            http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

    <configuration-properties doc:name="Configuration properties" file="mule-artifact.properties" />

    <http:request-config name="client_config" doc:name="HTTP client configuration">
        <http:request-connection protocol="HTTPS" host="jsonplaceholder.typicode.com" port="443"/>
    </http:request-config>

    <flow name="read-ws-write-file-sample">

        <scheduler doc:name="read-ws-transform">
            <scheduling-strategy>
                <fixed-frequency frequency="${read-ws-transform.polling.frequency}"/>
            </scheduling-strategy>
        </scheduler>

        <http:request method="GET" path="todos" config-ref="client_config" />

        <logger level="INFO" message="#[payload]"/>

        <!-- Simple transformation of payload, remove attributes and rename them using another notation -->
        <set-payload value="#[%dw 2.0 output application/json --- items: payload map ((item, index) -> { UserID : item.id, Title : item.title })]" mimeType="application/json" encoding="UTF-8" />

        <logger level="INFO" message="#[payload]"/>

        <scripting:execute doc:name="Transform using Groovy" engine="groovy">
            <scripting:code>
                import groovy.json.JsonSlurper;
                import groovy.json.JsonOutput;

                // Comes as a Stream, we need to convert it to a string so we can work with it
                // as "pure" JSON.
                java.util.Scanner s = new java.util.Scanner(payload).useDelimiter("\\A");
                def payload_as_string = s.hasNext() ? s.next() : "";

                // Slurp it
                def todos = new JsonSlurper().parseText(payload_as_string)

                // For each entry "MASK" the Title attribute
                todos.items.each {
                    it."Title" = "######"
                }

                // Return the result as a "string"
                payload = JsonOutput.toJson(todos)
            </scripting:code>
        </scripting:execute>

        <logger level="INFO" message="#[payload]"/>

    </flow>

</mule>
